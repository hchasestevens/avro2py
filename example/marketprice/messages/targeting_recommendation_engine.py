"""Schema definitions for `marketprice.messages.targeting_recommendation_engine` namespace. Generated by avro2py v.0.0.1."""
import datetime
import decimal
import enum
from typing import List, NamedTuple, Union


class TargetingRecommendationToEnricher(NamedTuple):
    """
    Provides required information to the TRE serving layer:
    mprice/v0/targeting-recommendation-to-enricher
    """

    product: "TargetingRecommendationProduct"
    entityType: "TargetingRecommendationToEnricher.EntityType"
    targetingClause: str
    sentAt: datetime.datetime

    @enum.unique
    class EntityType(enum.Enum):
        """
        The entity type for the targeting clause:
        """

        AD_GROUP = "AdGroup"
        SBKEYWORD = "SBKeyword"
        SPKEYWORD = "SPKeyword"
        SPTARGET = "SPTarget"
        WALLYWORLD_AD_ITEM = "WallyworldAdItem"
        WALLYWORLD_KEYWORD = "WallyworldKeyword"


class TargetingRecommendationProduct(NamedTuple):
    """
    product that requires a targeting recommendation:
    mprice/v0/targeting-recommendation-product
    """

    productIdentifier: Union[
        "TargetingRecommendationProduct.ProductIdentifier.Nile1pProduct",
        "TargetingRecommendationProduct.ProductIdentifier.NileProduct",
        "TargetingRecommendationProduct.ProductIdentifier.WallyworldProduct",
    ]
    sentAt: datetime.datetime

    class ProductIdentifier:
        class WallyworldProduct(NamedTuple):
            advertiserId: int
            itemId: str

        class NileProduct(NamedTuple):
            sellerId: str
            marketplaceId: str
            sku: str

        class Nile1pProduct(NamedTuple):
            vendorId: str
            marketplaceId: str
            nsin: str


class TargetingRecommendation(NamedTuple):
    """
    targeting recommendation engine decisions: mprice/v0/targeting-recommendation
    """

    profileId: int
    campaignId: int
    adGroupId: int
    sku: str
    bid: decimal.Decimal
    recommendationScore: decimal.Decimal
    recommendedAt: datetime.datetime
    Recommendation: Union[
        "TargetingRecommendation.Keyword",
        "TargetingRecommendation.ProductAttributeTarget",
    ]

    class ProductAttributeTarget(NamedTuple):
        """
        PAT expression description
        """

        expression: List["TargetingRecommendation.Predicate"]
        expressionType: "TargetingRecommendation.ExpressionType"
        expressionState: "TargetingRecommendation.KeywordState"

    @enum.unique
    class ExpressionType(enum.Enum):
        """
        Possible types of an expression
        """

        AUTO = "auto"
        MANUAL = "manual"

    class Predicate(NamedTuple):
        """
        Predicate of PAT expression for target recommendation
        """

        predicateType: "TargetingRecommendation.PredicateType"
        value: str

    @enum.unique
    class PredicateType(enum.Enum):
        """
        Types of PAT expression predicate enum
        """

        NSIN_ACCESSORY_RELATED = "nsinAccessoryRelated"
        NSIN_AGE_RANGE_SAME_AS = "nsinAgeRangeSameAs"
        NSIN_BRAND_SAME_AS = "nsinBrandSameAs"
        NSIN_CATEGORY_SAME_AS = "nsinCategorySameAs"
        NSIN_GENRE_SAME_AS = "nsinGenreSameAs"
        NSIN_IS_PRIME_SHIPPING_ELIGIBLE = "nsinIsPrimeShippingEligible"
        NSIN_PRICE_BETWEEN = "nsinPriceBetween"
        NSIN_PRICE_GREATER_THAN = "nsinPriceGreaterThan"
        NSIN_PRICE_LESS_THAN = "nsinPriceLessThan"
        NSIN_REVIEW_RATING_BETWEEN = "nsinReviewRatingBetween"
        NSIN_REVIEW_RATING_GREATER_THAN = "nsinReviewRatingGreaterThan"
        NSIN_REVIEW_RATING_LESS_THAN = "nsinReviewRatingLessThan"
        NSIN_SAME_AS = "nsinSameAs"
        NSIN_SUBSTITUTE_RELATED = "nsinSubstituteRelated"
        QUERY_BROAD_MATCHES = "queryBroadMatches"
        QUERY_BROAD_REL_MATCHES = "queryBroadRelMatches"
        QUERY_EXACT_MATCHES = "queryExactMatches"
        QUERY_HIGH_REL_MATCHES = "queryHighRelMatches"
        QUERY_PHRASE_MATCHES = "queryPhraseMatches"

    class Keyword(NamedTuple):
        """
        keyword description
        """

        keywordText: str
        matchType: "TargetingRecommendation.KeywordMatchType"
        keywordState: "TargetingRecommendation.KeywordState"

    @enum.unique
    class KeywordState(enum.Enum):
        """
        Possible states of a keyword
        """

        ARCHIVED = "archived"
        ENABLED = "enabled"
        PAUSED = "paused"

    @enum.unique
    class KeywordMatchType(enum.Enum):
        BROAD = "broad"
        EXACT = "exact"
        PHRASE = "phrase"
